input {
    file{
        path => ["/home/christian/Documents/ELK/logs-interop/oma-interop-app.log-20160207"]
        # path => ["/home/christian/Documents/ELK/logs-interop/test.log"]
        # path => ["/home/christian/Documents/ELK/test_erreur.log"]
        start_position => "beginning"
        sincedb_path => "/dev/null"

    }

  stdin{}
}


filter {
    grok {
        patterns_dir => "./patterns"
        match => ["message", "%{DEFAULT}"]
    }

    if [log_level] != "DEBUG" {
        ###########################################################
        #                       PARSE
        ###########################################################
        #parse
        grok {
            match => ["msg","%{INTEROP}"]
        }

        #timestamp
        date {
            match => ["log_date","ISO8601"]
        }

        #split sur la virgule
        if [@metadata][paramToParse] {
            kv {
              field_split => ", "
              source => "paramToParse"
            }
        }

        #parser une structure json
        json {
            source => "[@metadata][request_json]"
        }

        mutate {
            remove_field => ["Sender_Wallet_Receiver_Trans_DateTime"]
        }


        #rename de la classe SMS
        if [classname] == "Sending" {
            mutate {
              replace => { "classname" => "SendingSMS" }
            }
        }

        if [@metadata][incoming_uc_m] and [service_type] == "MMITransaction" and [request_type] == "webservice" {
            mutate {add_field => ["transaction_type","Transaction Received"]}
        } else if [@metadata][outgoing_ts] {
            mutate {add_field => ["transaction_type","Transaction Sent"]}
        }

        #obligé de remane sinon error, DateTime ?
        mutate {
            #rename => {"login" => "MMO"}
            rename => {"Sender_Wallet_Receiver_Trans_DateTime" => "Sender_Wallet_Receiver_Trans_date"}
            rename => {"mmo_id" => "MMO"}
            rename => {"SESSION ID" => "session_id"}
            rename => {"VERIFY ID" => "verify_Id"}
            rename => {"VERSION" => "version"}
        }


        ###########################################################
        #                     Previous event
        ###########################################################
       #Stock du transaction_id
       if[transaction_Id] {
            ruby {  
                init => "@@map = {}"
                code => "
                    @@map[event['verif_id']] = event['transaction_Id']
                    @@map[event['session_id']] = event['session_id']
                "
            }
        #SendingSms: ajout de l'id de transaction
       } else if[classname] == "SendingSMS" {
            ruby{
                code => "
                    if event['session_id'] == @@map[event['session_id']] 
                    then
                        event['transaction_Id'] = @@map[event['verif_id']] 
                    end"
            }
        #Timeout: ajout de l'id de transaction
       } else if[mmo_message] =~ /Timeout/ {
            ruby{
                code => "
                    if event['session_id'] == @@map[event['session_id']] 
                    then
                        event['transaction_Id'] = @@map[event['verif_id']] 
                    end"
            }
       }


       #Stock du transaction_id
       if [@metadata][outgoing_uc] and [AMOUNT] {
            ruby {  
                init => "@@tab = {}"
                code => "
                    @@tab[event['tmp_amount']] = event['AMOUNT']
                    @@tab[event['session_id']] = event['session_id']
                "
            }
        #SendingSms: ajout de l'id de transaction
       } else if[@metadata][incoming_ts] and [transaction_Status_Code] == "000" {
            ruby{
                code => "
                if event['session_id'] == @@tab[event['session_id']] 
                then
                    event['amount_success'] = @@tab[event['tmp_amount']]
                end"
                   
        }   }



       # if [@metadata][incoming_ts] and [usecase] ==  "task" and [transaction_Status_Code] == "000" {

       # }

        ###########################################################
        #                 Ajout du tag "log_type"
        ###########################################################
        if [@metadata][incoming_uc_m] and [usecase] ==  "ussd_Verify"  {
            mutate {add_field => ["@log_type","L'utilisateur fait une requête à Orange"]}
        } 
        else if [@metadata][outgoing_uc] and [usecase] ==  "ussd_Verify"  {
            mutate {add_field => ["@log_type","Retour à l'utilisateur de la requête Verify"]}
        } 
        else if [@metadata][outgoing_vs] and [usecase] ==  "ussd_Verify" {
            mutate {add_field => ["@log_type","Orange envoi l'opération verify vers le partenaire (%{MMO})"]}
        } 
        else if [@metadata][incoming_vs]  and [usecase] ==  "ussd_Verify" {
            mutate {add_field => ["@log_type","Retour du Verify venant du partenaire (%{MMO})"]}
        } 
        else if [@metadata][outgoing_uc] and [usecase] ==  "ussd_Transfer"{
            mutate {add_field => ["@log_type","L'utilisateur demande à Orange une opération de transfert"]}
        } 
        else if [@metadata][outgoing_u] and [usecase] ==  "ussd_Transfer" and [request] =~ /wallet\/cashoutonestep/{
            mutate {add_field => ["@log_type","Paiement demandé auprès de Tango "]}
        } 

        else if [@metadata][outgoing_ts] and [usecase] ==  "task" {
            mutate {add_field => ["@log_type","Orange demande un transfert vers le partenaire (%{MMO})"]}
        } 
        else if [@metadata][incoming_ts] and [usecase] ==  "task" {
            mutate {add_field => ["@log_type","Retour demande de transfert venant du partenaire (%{MMO})"]}
        } 
        else if [usecase] ==  "task" and [classname] == "SendingSMS"{
            mutate {add_field => ["@log_type","Envoi SMS"]}
        } else if[mmo_message] {
            mutate {add_field => ["@log_type","%{mmo_message}"]}
        } 
        else if[task] {
            mutate {add_field => ["@log_type","Tâche en cours:%{task}"]}
        }


        ###########################################################
        #                      DROP
        ###########################################################
        #On drop les données inutilies
        # if [usecase] ==  "ussd_Transfer" and [classname] == "Interop\Utils" and [request] =~ /wallet\/pricing/ {
        #     drop {}
        # } 

        if [msg] =~ /getclanguage/ or [msg] =~ /wallet\/pricing/ {
            drop{}
        }

        if [@metadata][outgoing_u] and [usecase] ==  "task" and [request] =~ /text\=/{
            drop{}
        } 

        if [usecase] == "Transaction" and [request] =~ /smsc\=/ {
            drop {}
        }

        # if [request] =~ /wallet\/userenquiry/ or [request] =~ /wallet\/getclanguage/ or [request] =~ /\/sendsms/ {
        #     drop {}
        # }

        if "_grokparsefailure" in [tags] { drop {} }


        ###########################################################
        #                      AUTRES
        ###########################################################

        #on met en minuscule les mmo
        if [MMO] {
            mutate {
                lowercase => [ "MMO" ]
            }
        }


        #change le type d'une variable
        mutate {
            convert => { "AMOUNT" => "integer" }
            convert => { "amount_success" => "integer" }
            convert => { "transfer" => "integer" }
            convert => { "transaction_Amount" => "integer" }
        }
    
        #Suppression des champs inutiles
        mutate {
            # remove_field => [ "message" ]
            # remove_field => [ "msg" ]
            # remove_field => [ "request_json" ]
            #remove_field => [ "incoming_uc_m","incoming_vc","incoming_ts","incoming_u","outgoing_uc","outgoing_u","outgoing_vs","outgoing_m","outgoing_ts"]
            remove_field => [ "host","path","PIN_CODE","password","Sender_Wallet_Receiver_Pin","paramToParse","OM PIN CODE","OM PIN CODE"]
        }

       
    }

    # 
}



output {
    if [log_level] != "DEBUG" {
        if [classname] !~ /(TasksBDAccess)$/ {
            # if "_grokparsefailure" in [tags] {
                stdout {
                    codec => rubydebug {
                        metadata => true
                    }
                } 

                elasticsearch {
                    hosts => "127.0.0.1"
                    index => "logstash-interop-app"
                    user => "admin_orange"
                    password => "admin_orange"
                }


            # }
        }
    }



} 