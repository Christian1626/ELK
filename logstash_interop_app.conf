input {
    file{
        path => ["/home/christian/Documents/ELK/logs-interop/oma-interop-app.log-20160207"]
        # path => ["/home/christian/Documents/ELK/logs-interop/test.log"]
        # path => ["/home/christian/Documents/ELK/test_erreur.log"]
        start_position => "beginning"
        sincedb_path => "/dev/null"
    }


  stdin{}
}

output {
    if [log_level] != "DEBUG" {
        if [classname] !~ /(TasksBDAccess)$/ {
            # if "_grokparsefailure" in [tags] {
                stdout {
                    codec => rubydebug {
                        metadata => true
                    }
                } 

                elasticsearch {
                    hosts => "127.0.0.1"
                    index => "logstash-interop-app"
                    user => "admin_orange"
                    password => "admin_orange"
                }



            # }
        }
    }



} 


filter {
    grok {
        patterns_dir => "./patterns"
        match => ["message", "%{DEFAULT}"]
    }

    if [log_level] != "DEBUG" {
        ###########################################################
        #                       PARSE
        ###########################################################
        #parse
        grok {
            match => ["msg","%{INTEROP}"]
        }

        #timestamp
        date {
            match => ["log_date","ISO8601"]
        }

        #split sur la virgule
        if [@metadata][paramToParse] {
            kv {
              field_split => ", "
              source => "paramToParse"
            }
        }

        #parser une structure json
        json {
            source => "[@metadata][request_json]"
        }

        mutate {
            remove_field => ["Sender_Wallet_Receiver_Trans_DateTime"]
        }

        #rename de la classe SMS
        if [classname] == "Sending" {
            mutate {
              replace => { "classname" => "SendingSMS" }
            }
        }

        #obligé de remane sinon error, DateTime ?
        mutate {
            # rename => {"transaction_Status_Code" => "statu"}
            rename => {"Sender_Wallet_Receiver_Trans_DateTime" => "Sender_Wallet_Receiver_Trans_date"}
            rename => {"mmo_id" => "MMO"}
            rename => {"TRANSFER ID" => "transaction_Id"}
            rename => {"SESSION ID" => "session_id"}
            rename => {"VERIFY ID" => "verify_Id"}
            rename => {"VERSION" => "version"}
            rename => {"ADDON CODE" => "addon_code"}
        }



        ###########################################################
        #                   ELAPSED sur VERIFY
        ###########################################################
        if [usecase]== "ussd_Verify" {
            #Start: envoi verify de l'utilisateur
            if [@metadata][incoming_uc_m]{
                mutate  {
                    add_tag => ["taskStarted"]
                }
            }

            #QUESTION: etape verify orange -> partenaire ? 
            #End: retour verify à l'utilisateur
            else if  [@metadata][outgoing_uc] { #and [addon_code] == "IOPV000" {
                mutate  {
                    add_tag => ["taskTerminated"]
                }
            }
        }

            elapsed {
                start_tag => "taskStarted"
                end_tag => "taskTerminated"
                unique_id_field => "session_id"
                timeout => 100
            }
        mutate { rename => {"elapsed_time" => "elapsed_time_verify"}}
               

        ###########################################################
        #                   ELAPSED sur TRANSFER
        ###########################################################

            #Start: envoi transfert de l'utilisateur
            if[@metadata][incoming_uc_m] and [usecase] ==  "ussd_Transfer"{
                mutate  {
                    add_tag => ["taskStarted2"]
                }
            }

            #End: retour transfert du partenaire
            else if  [@metadata][incoming_ts] and ([usecase] ==  "task" or [usecase] == "Transaction") and [transaction_Status_Code] == "000" {
                mutate  {
                    add_tag => ["taskTerminated2"]
                }
            
            }

            elapsed {
                start_tag => "taskStarted2"
                end_tag => "taskTerminated2"
                unique_id_field => "session_id"
                timeout => 100
            }

        mutate { rename => {"elapsed_time" => "elapsed_time_transfer"}}
        ###########################################################
        #                     Previous event
        ###########################################################

        #======================================
        # Gestion des verif ID -
        #======================================
        # --> permet l'affichage des SMS et timeout pour une session_id

       #Stock du transaction_id
       if[transaction_Id] {
            ruby {  
                init => "@@map = Array.new"
                code => "
                    @@map[0] = event['session_id']
                    @@map[1] = event['transaction_Id']
                "
            }
        #SendingSms: ajout de l'id de transaction
       } else if[classname] == "SendingSMS" {
            ruby{
                code => "
                    if event['session_id'] == @@map[0] 
                    then
                        event['transaction_Id'] = @@map[1] 
                    end"
            }
        #Timeout: ajout de l'id de transaction
       } else if[mmo_message] =~ /(Timeout|Customer invalid|Verify no response|Verify KO)/ {
            ruby{
                code => "
                    if event['session_id'] == @@map[0] 
                    then
                        event['transaction_Id'] = @@map[1] 
                    end"
            }
       }


       #Gestion des montants de transactions
       #transaction recue
       if [service_type] == "MMITransaction" and [request_type] == "webservice" {
            if[@metadata][incoming_uc_m] {
                 ruby {  
                    init => "@@array = Array.new"
                    code => "
                        @@array[0] = event['session_id']
                        @@array[1] = event['login']
                        @@array[2] = event['transaction_Amount']
                    "
                }
            } else if[@metadata][outgoing_m] and [transaction_Status_Code] == "000" {
                 ruby {  
                    code => "
                        if event['session_id'] == @@array[0]
                        then
                            event['MMO'] = @@array[1]
                            event['amount_success'] = @@array[2]
                        end"
                }

                mutate {add_field => ["transaction_type","Transaction Received"]}
            }
        }


        #transaction envoyée
        #Stock du transaction_id
       if ([@metadata][outgoing_uc] and [AMOUNT]) or ([task] and [interop_transfer_amount]) {
            ruby {  
                init => "@@tab = Array.new"
                code => "
                    @@tab[0] = event['session_id']
                    if defined?(event['interop_transfer_amount'])
                    then
                        @@tab[1] = event['interop_transfer_amount']
                    elsif defined?(event['AMOUNT']) 
                    then
                        @@tab[1] = event['AMOUNT']
                    end

                "
            }
        #SendingSms: ajout de l'id de transaction
       } else if[@metadata][incoming_ts] and [transaction_Status_Code] == "000" {
            ruby{
                code => "
                if event['session_id'] == @@tab[0] 
                then
                    event['amount_success'] = @@tab[1]
                end"
            }   

            mutate {add_field => ["transaction_type","Transaction Sent"]}
        }

        ###########################################################
        #                      DROP
        ###########################################################
        #On drop les données inutilies
        # if [usecase] ==  "ussd_Transfer" and [classname] == "Interop\Utils" and [request] =~ /wallet\/pricing/ {
        #     drop {}
        # } 

        if [msg] =~ /getclanguage/ or [msg] =~ /wallet\/pricing/ {
            drop{}
        }

        if [@metadata][outgoing_u] and [usecase] ==  "task" and [request] =~ /text\=/{
            drop{}
        } 

        if [usecase] == "Transaction" and [request] =~ /smsc\=/ {
            drop {}
        }

        # if [request] =~ /wallet\/userenquiry/ or [request] =~ /wallet\/getclanguage/ or [request] =~ /\/sendsms/ {
        #     drop {}
        # }

        if "_grokparsefailure" in [tags] { drop {} }


        ###########################################################
        #                      AUTRES
        ###########################################################

        #on met en minuscule les mmo
        if [MMO] {
            mutate {
                lowercase => [ "MMO" ]
            }
        }


        #change le type d'une variable
        mutate {
            convert => { "AMOUNT" => "integer" }
            convert => { "amount_success" => "integer" }
            convert => { "transfer" => "integer" }
            convert => { "transaction_Amount" => "integer" }
        }
    
        #Suppression des champs inutiles
        mutate {
            # remove_field => [ "message" ]
            remove_field => [ "msg" ]
            # remove_field => [ "tags" ]
            remove_field => [ "host","path","PIN_CODE","password","Sender_Wallet_Receiver_Pin","paramToParse","OM PIN CODE"]
        }

       
    }

    # 
}




















###################################################################
#                      STATUS CODE DESCRIPTION
################################################################### 
filter {
        #verify
    if [usecase] == "Verify" or [usecase] == "ussd_Verify"{
        if [status_Code] == "000" {
            mutate {
                replace => ["status_Code_Description","R: Verify OK"]
            }
        }

        if [status_Code] == "900" {
            mutate {
                replace => ["status_Code_Description","R: Generic technical error"]
            }
        }

        if [status_Code] == "100" {
            mutate {
                replace => ["status_Code_Description","R: Verify KO"]
            }
        }

        if [status_Code] == "101" {
            mutate {
                replace => ["status_Code_Description","R: Customer invalid"]
            } 
        } 

        if [status_Code] == "901" {
            mutate {
                replace => ["status_Code_Description","R: MMO Sender technical error"]
            }
        }


        if [status_Code] == "902" {
            mutate {
                replace => ["status_Code_Description","R: MMO Sender technical error"]
            }
        }

        if [status_Code] == "102" {
            mutate {
                replace => ["status_Code_Description","R: Customer balance maximal"]
            }
        }
    }


    #transfer
    if [usecase] == "task" or [usecase] == "Transaction" {
        if [transaction_Status_Code] == "101" {
            mutate {
                replace => ["transaction_Status_Code_Description","R: Customer invalid"]
            }
        }

        if [transaction_Status_Code] == "901" {
            mutate {
                replace => ["transaction_Status_Code_Description","R: MMO Sender technical error"]
            }
        }

        if [transaction_Status_Code] == "100" {
            mutate {
                replace => ["transaction_Status_Code_Description","Transfer"]
            }
        }

        if [transaction_Status_Code] == "902" {
            mutate {
                replace => ["transaction_Status_Code_Description","R: MMO Sender technical error"]
            }
        }

        if [transaction_Status_Code] == "102" {
            mutate {
                replace => ["transaction_Status_Code_Description","R: Customer balance maximal"]
            }
        }

        if [transaction_Status_Code] == "001" {
            mutate {
                replace => ["transaction_Status_Code_Description","R: Transfer in progress"]
            }
        }

        if [transaction_Status_Code] == "000" {
            mutate {
                replace => ["transaction_Status_Code_Description","R: Transfer OK"]
            }
        }

        if [transaction_Status_Code] == "000" {
            mutate {
                replace => ["transaction_Status_Code_Description","R: Transfer OK after time-out"]
            }
        }

        if [transaction_Status_Code] == "900" {
            mutate {
                replace => ["transaction_Status_Code_Description","R: Generic technical error"]
            }
        }

        # if [status_Code] == "100" {
        #   mutate {
        #   # R: Transfer KO after time-out
        #   replace => ["status_Code_Description","Generic update operation failure"]
        #   }
        # }

        # if [status_Code] == "001" {
        #   mutate {
        #       replace => ["status_Code_Description","R: Transfer in progress"]
        #   }
        # }
    }

     if [status_Code] == "911" or [transaction_Status_Code] == "911" {
        mutate {
            replace => ["status_Code_Description","WS: Authentication failed (Login/Password)"]
            replace => ["transaction_Status_Code_Description","WS: Authentication failed (Login/Password)"]
        }
    }



    if [status_Code] == "912" or [transaction_Status_Code] == "912" {
            mutate {
            replace => ["status_Code_Description","WS: Unknown operation"]
            replace => ["transaction_Status_Code_Description","WS: Unknown operation"]
        }
    }

    if [status_Code] == "913" or [transaction_Status_Code] == "913" {
            mutate {
            replace => ["status_Code_Description","WS: Mandatory parameter missing"]
            replace => ["transaction_Status_Code_Description","WS: Mandatory parameter missing"]
        }
    }

    if [status_Code] == "914" or [transaction_Status_Code] == "914" {
            mutate {
            replace => ["status_Code_Description","WS: Currency not supported"]
            replace => ["transaction_Status_Code_Description","WS: Currency not supported"]
        }
    }

    if [status_Code] == "915" or [transaction_Status_Code] == "915" {
        mutate {
            replace => ["status_Code_Description","Web Service : Missing Verify ID"]
            replace => ["transaction_Status_Code_Description","Web Service : Missing Verify ID"]
        }
    }

    if [status_Code] == "916" or [transaction_Status_Code] == "916" {
        mutate {
            replace => ["status_Code_Description","WS: Service unavailable"]
            replace => ["transaction_Status_Code_Description","WS: Service unavailable"]
        }
    }

    if [status_Code] == "910" or [transaction_Status_Code] == "910" {
        mutate {
            replace => ["status_Code_Description","WS: Generic error"]
            replace => ["transaction_Status_Code_Description","WS: Generic error"]
        }
    }  
}
















###################################################################
#                      addon_code DESCRIPTION                     #
################################################################### 

filter {
    if [addon_code] == "IOPV001" {
        mutate { add_field => ["addon_code_description","R: Customer no firstname"] }
    }


    else if [addon_code] == "IOPV000" {
        mutate { add_field => ["addon_code_description","R: Verify OK"] }
    }


    else if [addon_code] == "IOPV900" {
        mutate { add_field => ["addon_code_description","R: Verify no response"] }
    }


    else if [addon_code] == "IOPV100" {
        mutate { add_field => ["addon_code_description","R: Verify KO"] }
    }


    else if [addon_code] == "IOPV101" {
        mutate { add_field => ["addon_code_description","R: Customer invalid"] }
    }


    else if [addon_code] == "IOPV901" {
        mutate { add_field => ["addon_code_description","R: MMO Sender PIN invalid"] }
    }


    else if [addon_code] == "IOPV902" {
        mutate { add_field => ["addon_code_description","R: MMO Sender balance insufficient"] }
    }


    else if [addon_code] == "IOPV102" {
        mutate { add_field => ["addon_code_description","R: Customer balance maximal"] }
    }


    else if [addon_code] == "IOPV103" {
        mutate { add_field => ["addon_code_description","R: Customer thresholds not compliant"] }
    }


    else if [addon_code] == "IOPT021" {
        mutate { add_field => ["addon_code_description","S: Transfer in progress"] }
    }


    else if [addon_code] == "IOPT121" {
        mutate { add_field => ["addon_code_description","S: Customer invalid"] }
    }


    else if [addon_code] == "IOPT101" {
        mutate { add_field => ["addon_code_description","R: Customer invalid"] }
    }


    else if [addon_code] == "IOPT122" {
        mutate { add_field => ["addon_code_description","S: Customer PIN invalid x 1"] }
    }


    else if [addon_code] == "IOPT123" {
        mutate { add_field => ["addon_code_description","S: Customer PIN invalid x 2"] }
    }


    else if [addon_code] == "IOPT124" {
        mutate { add_field => ["addon_code_description","S: Customer PIN invalid x 3"] }
    }


    else if [addon_code] == "IOPT125" {
        mutate { add_field => ["addon_code_description","S: Customer balance insufficient"] }
    }


    else if [addon_code] == "IOPT922" {
        mutate { add_field => ["addon_code_description","S: MMO Sender balance maximal"] }
    }


    else if [addon_code] == "IOPT901" {
        mutate { add_field => ["addon_code_description","R: MMO Sender PIN invalid"] }
    }


    else if [addon_code] == "IOPT126" {
        mutate { add_field => ["addon_code_description","S: Customer thresholds not compliant"] }
    }


    else if [addon_code] == "IOPT127" {
        mutate { add_field => ["addon_code_description","S: Customer duplicate Transfer"] }
    }


    else if [addon_code] == "IOPT120" {
        mutate { add_field => ["addon_code_description","S: Transfer KO"] }
    }


    else if [addon_code] == "IOPT130" {
        mutate { add_field => ["addon_code_description","S: No Service Charge"] }
    }


    else if [addon_code] == "IOPT020" {
        mutate { add_field => ["addon_code_description","S: Transfer OK"] }
    }


    else if [addon_code] == "IOPT900" {
        mutate { add_field => ["addon_code_description","R: Transfer no response (update needed)"] }
    }


    else if [addon_code] == "IOPT100" {
        mutate { add_field => ["addon_code_description","R: Transfer KO"] }
    }


    else if [addon_code] == "IOPT902" {
        mutate { add_field => ["addon_code_description","R: MMO Sender balance insufficient"] }
    }


    else if [addon_code] == "IOPT102" {
        mutate { add_field => ["addon_code_description","R: Customer balance maximal"] }
    }


    else if [addon_code] == "IOPT103" {
        mutate { add_field => ["addon_code_description","R: Customer thresholds not compliant"] }
    }


    else if [addon_code] == "IOPT001" {
        mutate { add_field => ["addon_code_description","R: Transfer in progress"] }
    }


    else if [addon_code] == "IOPT000" {
        mutate { add_field => ["addon_code_description","R: Transfer OK"] }
    }


    else if [addon_code] == "IOPT128" {
        mutate { add_field => ["addon_code_description","S: Transfer cancelled"] }
    }


    else if [addon_code] == "IOPT129" {
        mutate { add_field => ["addon_code_description","S: Transfer not cancelled (Reimbursement needed)"] }
    }


    else if [addon_code] == "IOPU120" {
        mutate { add_field => ["addon_code_description","S: Transfer KO after time-out"] }
    }


    else if [addon_code] == "IOPU000" {
        mutate { add_field => ["addon_code_description","R: Transfer OK after time-out"] }
    }


    else if [addon_code] == "IOPU121" {
        mutate { add_field => ["addon_code_description","S: Transfer not in time-out"] }
    }


    else if [addon_code] == "IOPU028" {
        mutate { add_field => ["addon_code_description","S: Transfer cancelled after time-out"] }
    }


    else if [addon_code] == "IOPU029" {
        mutate { add_field => ["addon_code_description","MMO Sender; Transfer not cancelled after time-out"] }
    }


    else if [addon_code] == "IOPU021" {
        mutate { add_field => ["addon_code_description","S: Transfer in progress"] }
    }


    else if [addon_code] == "IOPU920" {
        mutate { add_field => ["addon_code_description","S: Update no response"] }
    }


    else if [addon_code] == "IOPU921" {
        mutate { add_field => ["addon_code_description","R: Status not consistent"] }
    }


    else if [addon_code] == "IOPU900" {
        mutate { add_field => ["addon_code_description","R: Update no response"] }
    }


    else if [addon_code] == "IOPU100" {
        mutate { add_field => ["addon_code_description","R: Transfer KO after time-out"] }
    }


    else if [addon_code] == "IOPU001" {
        mutate { add_field => ["addon_code_description","R: Transfer in progress"] }
    }


    else if [addon_code] == "IOPW911" {
        mutate { add_field => ["addon_code_description","WS: Authentication failed (Login/Password)"] }
    }


    else if [addon_code] == "IOPW912" {
        mutate { add_field => ["addon_code_description","WS: Unknown operation"] }
    }


    else if [addon_code] == "IOPW913" {
        mutate { add_field => ["addon_code_description","WS: Mandatory parameter missing"] }
    }


    else if [addon_code] == "IOPW914" {
        mutate { add_field => ["addon_code_description","WS: Currency not supported"] }
    }


    else if [addon_code] == "IOPW910" {
        mutate { add_field => ["addon_code_description","WS: Generic error"] }
    }


    else if [addon_code] == "IOPW915" {
        mutate { add_field => ["addon_code_description","WS: Missing Verify ID"] }
    }


    else if [addon_code] == "IOPW916" {
        mutate { add_field => ["addon_code_description","WS: Service unavailable"] }
    }


    else if [addon_code] == "IOPA999" {
        mutate { add_field => ["addon_code_description","AddOn: Technical error"] }
    }


    else if [addon_code] == "IOPB000" {
        mutate { add_field => ["addon_code_description","OM Account: Balance OK"] }
    }


    else if [addon_code] == "IOPB900" {
        mutate { add_field => ["addon_code_description","OM Account: Balance no response"] }
    }


    else if [addon_code] == "IOPB100" {
        mutate { add_field => ["addon_code_description","OM Account: Balance KO"] }
    }


    else if [addon_code] == "IOPB901" {
        mutate { add_field => ["addon_code_description","OM Account: Technical PIN invalid"] }
    }


    else if [addon_code] == "IOPB911" {
        mutate { add_field => ["addon_code_description","OM Account: Balance not authorized"] }
    }

}























filter {
    ###########################################################
    #                 Ajout du tag "log_type"
    ###########################################################
    if [@metadata][incoming_uc_m] and [usecase] ==  "ussd_Verify"  {
        mutate {add_field => ["@log_type","L'utilisateur fait une requête Verify à Orange"]}
    } 
    else if [@metadata][outgoing_uc] and [usecase] ==  "ussd_Verify"  {
        mutate {add_field => ["@log_type","Retour à l'utilisateur de la requête Verify: %{addon_code_description}"]}
    } 
    else if [@metadata][outgoing_vs] and [usecase] ==  "ussd_Verify" {
        mutate {add_field => ["@log_type","Orange envoi l'opération verify vers le partenaire (%{MMO})"]}
    } 
    else if [@metadata][incoming_vs]  and [usecase] ==  "ussd_Verify" {
        mutate {add_field => ["@log_type","Retour du Verify venant du partenaire (%{MMO}): %{status_Code_Description}"]}
    } 
    else if [@metadata][incoming_uc_m] and [usecase] ==  "ussd_Transfer"{
        mutate {add_field => ["@log_type","L'utilisateur demande à Orange une opération de transfert"]}
    } 
    else if [@metadata][outgoing_uc] and [usecase] ==  "ussd_Transfer"{
        mutate {add_field => ["@log_type","Retour à l'utilisateur de la demande de transfert : %{addon_code_description}"]}
    } 
    else if [@metadata][outgoing_u] and [usecase] ==  "ussd_Transfer" and [request] =~ /wallet\/cashoutonestep/{
        mutate {add_field => ["@log_type","Paiement demandé auprès de Tango "]}
    } 

    else if [@metadata][outgoing_ts] and [usecase] ==  "task" {
        mutate {add_field => ["@log_type","Orange demande un transfert vers le partenaire (%{MMO})"]}
    } 
    else if [@metadata][incoming_ts] and [usecase] ==  "task" {
        mutate {add_field => ["@log_type","Retour demande de transfert venant du partenaire (%{MMO}) : %{transaction_Status_Code_Description}"]}
    } 
    else if [usecase] ==  "task" and [classname] == "SendingSMS"{
        mutate {add_field => ["@log_type","Envoi SMS"]}
    } 
    else if[mmo_message] {
        mutate {add_field => ["@log_type","%{mmo_message}"]}
    } 
    else if[task] {
        mutate {add_field => ["@log_type","Tâche en cours:%{task}"]}
    }
    else if[@metadata][incoming_uc_m] and [transaction_type] {
        mutate {add_field => ["@log_type","Webservice: Transaction reçue"]}
    } 
    else if[@metadata][outgoing_m] and [service_type] == "MMITransaction" and [request_type] == "webservice" {
        mutate {add_field => ["@log_type","Réponse au Webservice (lors d'une transaction reçue): %{status_Code_Description}"]}
    }
}
